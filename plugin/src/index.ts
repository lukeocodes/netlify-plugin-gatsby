import path, { dirname, join } from 'path'
import fs from 'fs-extra'
import { spliceConfig } from './helpers/config'
const normalizedCacheDir = (PUBLISH_DIR) =>
  path.normalize(`${PUBLISH_DIR}/../.cache`)

const getCacheDirs = (PUBLISH_DIR) => [
  PUBLISH_DIR,
  normalizedCacheDir(PUBLISH_DIR),
]

const lmdbCacheString = 'process.cwd(), `.cache/${cacheDbFile}`'
const replacement = "require('os').tmpdir(), 'gatsby', `.cache/${cacheDbFile}`"

async function patchFile(baseDir) {
  const bundleFile = join(baseDir, '.cache', 'query-engine', 'index.js')
  if (!fs.existsSync(bundleFile)) {
    return
  }
  const bundle = await fs.readFile(bundleFile, 'utf8')

  //  I'm so, so sorry
  fs.writeFileSync(bundleFile, bundle.replace(lmdbCacheString, replacement))
}

function fixedPagePath(pagePath) {
  return pagePath === `/` ? `index` : pagePath
}

const DEFAULT_FUNCTIONS_SRC = 'netlify/functions'

const hasPlugin = (plugins, pluginName) =>
  plugins &&
  plugins.some(
    (plugin) =>
      plugin &&
      (typeof plugin === 'string'
        ? plugin === pluginName
        : plugin.resolve === pluginName),
  )

const loadGatsbyFile = function (utils) {
  const gatsbyConfigFile = path.resolve(process.cwd(), 'gatsby-config.js')
  if (!fs.existsSync(gatsbyConfigFile)) {
    return {}
  }

  try {
    return require(gatsbyConfigFile)
  } catch (error) {
    utils.build.failBuild('Could not load gatsby-config.js', { error })
  }
}

export async function onPreBuild({
  constants: { PUBLISH_DIR },
  utils,
  netlifyConfig,
}) {
  // print a helpful message if the publish dir is misconfigured
  if (!PUBLISH_DIR || process.cwd() === PUBLISH_DIR) {
    utils.build.failBuild(
      `Gatsby sites must publish the public directory, but your site’s publish directory is set to “${PUBLISH_DIR}”. Please set your publish directory to your Gatsby site’s public directory.`,
    )
  }

  const cacheDirs = getCacheDirs(PUBLISH_DIR)

  if (await utils.cache.restore(cacheDirs)) {
    console.log('Found a Gatsby cache. We’re about to go FAST. ⚡️')
  } else {
    console.log('No Gatsby cache found. Building fresh.')
  }

  // warn if gatsby-plugin-netlify is missing
  const pluginName = 'gatsby-plugin-netlify'
  const gatsbyConfig = loadGatsbyFile(utils)

  if (!hasPlugin(gatsbyConfig.plugins, pluginName)) {
    console.warn(
      'Install `gatsby-plugin-netlify` if you would like to support Gatsby redirects. https://www.gatsbyjs.com/plugins/gatsby-plugin-netlify/',
    )
  }

  if (hasPlugin(gatsbyConfig.plugins, 'gatsby-plugin-netlify-cache')) {
    console.error(
      "The plugin 'gatsby-plugin-netlify-cache' is not compatible with the Gatsby build plugin",
    )
    console.error(
      'Please uninstall gatsby-plugin-netlify-cache and remove it from your gatsby-config.js',
    )
    utils.build.failBuild('Incompatible Gatsby plugin installed')
  }

  if (
    netlifyConfig.plugins.some(
      (plugin) => plugin && plugin.package === 'netlify-plugin-gatsby-cache',
    )
  ) {
    console.warn(
      "The plugin 'netlify-plugin-gatsby-cache' is no longer required and should be removed.",
    )
  }
}

export async function onBuild({
  constants: {
    PUBLISH_DIR,
    FUNCTIONS_SRC = DEFAULT_FUNCTIONS_SRC,
    INTERNAL_FUNCTIONS_SRC,
  },
  netlifyConfig,
}) {
  const CACHE_DIR = normalizedCacheDir(PUBLISH_DIR)
  const GATSBY_DIR = dirname(PUBLISH_DIR)
  const compiledFunctions = path.join(CACHE_DIR, '/functions')
  if (!fs.existsSync(compiledFunctions)) {
    return
  }

  const functionsSrcDir = INTERNAL_FUNCTIONS_SRC
    ? INTERNAL_FUNCTIONS_SRC
    : FUNCTIONS_SRC

  // copying Netlify wrapper function into functions directory
  await fs.copy(
    path.join(__dirname, '..', 'src', 'templates', 'api'),
    path.join(functionsSrcDir, '__api'),
  )
  await fs.copy(
    path.join(__dirname, '..', 'src', 'templates', 'dsr'),
    path.join(functionsSrcDir, '__dsr'),
  )

  if (
    INTERNAL_FUNCTIONS_SRC &&
    fs.existsSync(path.join(FUNCTIONS_SRC, 'gatsby'))
  ) {
    console.log(`
Detected the function "${path.join(
      FUNCTIONS_SRC,
      'gatsby',
    )}" that seem to have been generated by an old version of the Essential Gatsby plugin. 
The plugin no longer uses this and it should be deleted to avoid conflicts.\n`)
  }

  netlifyConfig.functions['__api'] = {
    included_files: [path.posix.join(compiledFunctions, '**')],
    external_node_modules: ['msgpackr-extract'],
  }

  netlifyConfig.functions['__dsr'] = {
    included_files: [
      path.posix.join(CACHE_DIR, 'data', '**'),
      path.posix.join(CACHE_DIR, 'query-engine', '**'),
      path.posix.join(CACHE_DIR, 'page-ssr', '**'),
    ],
    external_node_modules: ['msgpackr-extract'],
  }

  await spliceConfig({
    startMarker: '# @netlify/plugin-gatsby start',
    endMarker: '# @netlify/plugin-gatsby end',
    contents: `GATSBY_PRECOMPILE_DEVELOP_FUNCTIONS=true`,
    fileName: path.posix.resolve(
      path.posix.join(PUBLISH_DIR, '..', '.env.development'),
    ),
  })

  const root = dirname(netlifyConfig.build.publish)
  await patchFile(root)
  const functions = await fs.readJson(
    join(root, '.cache', 'functions', 'manifest.json'),
  )

  const redirects = []
  for (const func of functions) {
    if (!func.functionRoute.startsWith('_ssr')) {
      continue
    }
    let route = func.matchPath || func.functionRoute
    route = route.replace('_ssr/', '/')
    if (route.startsWith('/page-data')) {
      route = [...fixedPagePath(route).split('/'), 'page-data.json']
        .filter(Boolean)
        .join('/')
    }
    redirects.push(`${route} /.netlify/functions/__api 200`)
  }
  redirects.push(
    `/api/* /.netlify/functions/__api 200`,
    `/* /.netlify/functions/__dsr 200`,
  )
  spliceConfig({
    startMarker: '# @netlify/plugin-gatsby redirects start',
    endMarker: '# @netlify/plugin-gatsby redirects end',
    contents: redirects.join('\n'),
    fileName: join(netlifyConfig.build.publish, '_redirects'),
  })
}

export async function onPostBuild({ constants: { PUBLISH_DIR }, utils }) {
  const cacheDirs = getCacheDirs(PUBLISH_DIR)

  if (await utils.cache.save(cacheDirs)) {
    utils.status.show({
      title: 'Essential Gatsby Build Plugin ran successfully',
      summary: 'Stored the Gatsby cache to speed up future builds. 🔥',
    })
  } else {
    console.log('No Gatsby build found.')
  }
}
